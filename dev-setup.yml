- hosts: localhost
  gather_facts: true
  become: true
  become_user: "{{ lookup('env', 'USER') }}"

  pre_tasks:
    - name: update repositories
      apt: update_cache=yes
      become_user: root
      changed_when: False
  vars:
    user: "{{ ansible_user_id }}"
  
  tasks:
    - name: install common tools
      apt:
        force: yes
        state: present
        update_cache: yes
        cache_valid_time: 604800
        name:
          - git
          - emacs-nox
          - expect
          - tmux

    - name: Create DEV directory
      file:
        path: "/home/{{ ansible_user_id }}/DEV"
        state: directory

    - name: git config
      tags: git
      block:
        - name: setting1
          community.general.git_config:
            name: credential.helper
            scope: global
            value: cache

        - name: git settings 2
          community.general.git_config:
            name: credential.helper
            scope: global
            value: cache --timeout=10800

        - name: git settings 3
          community.general.git_config:
            name: user.email
            scope: global
            value: jglara@gmail.com

        - name: git settings 4
          community.general.git_config:
            name: user.name
            scope: global
            value: jglara
            

    - name: emacs setup
      tags: emacs
      block:
        - name: clone dot repo
          ansible.builtin.git:
            repo: https://github.com/jglara/dot.git
            dest: "/home/{{ansible_user_id}}/DEV/dot"

        - name: Create a symbolic link
          ansible.builtin.file:
            src: "/home/{{ansible_user_id}}/DEV/dot/dot_emacs"
            dest: "/home/{{ansible_user_id}}/.emacs"
            owner: "{{ansible_user_id}}"
            state: link
    
    - name: c++ dev stack
      tags: c++
      apt:
        force: yes
        state: present
        update_cache: yes
        cache_valid_time: 604800
        name:
          - cmake
          - clang
          - clang-tools
          - clangd

# RUST
    - name: check if cargo is installed
      tags: rust
      shell: command -v cargo
      register: cargo_exists
      ignore_errors: yes

    - name: Download Installer
      when: cargo_exists is failed
      get_url:
        url: https://sh.rustup.rs
        dest: /tmp/sh.rustup.rs
        mode: '0755'
        force: 'yes'
      tags:
        - rust

    - name: install rust/cargo
      when: cargo_exists is failed
      shell: /tmp/sh.rustup.rs -y
      tags:
        - rust


    - name: rust analyzer clone
      ansible.builtin.git:
        repo: https://github.com/rust-analyzer/rust-analyzer.git
        dest: "/home/{{ansible_user_id}}/DEV/rust-analyzer"
      tags:
        - rust
        - rust-analyzer
        

    - name: install rust-analyzer
      shell: "/home/{{ansible_user_id}}/.cargo/bin/cargo xtask install --server"
      args:
        chdir: "/home/{{ansible_user_id}}/DEV/rust-analyzer"
      tags:
        - rust
        - rust-analyzer
         
# HASKELL
    - name: haskell pre-reqs
      tags: haskell
      apt:
        force: yes
        state: present
        update_cache: yes
        cache_valid_time: 604800
        name:
          - build-essential
          - curl
          - libffi-dev
          - libffi8ubuntu1
          - libgmp-dev
          - libgmp10
          - libncurses-dev
          - libncurses5
          - libtinfo5
          
    - name: Download haskell Installer
      get_url:
        url: https://get-ghcup.haskell.org
        dest: /tmp/sh.ghcup.rs
        mode: '0755'
        force: 'yes'
      tags:
        - haskell

    - name: install haskell toolchain
      shell: BOOTSTRAP_HASKELL_NONINTERACTIVE=1 BOOTSTRAP_HASKELL_INSTALL_HLS=1 /tmp/sh.ghcup.rs
      tags:
        - haskell

# PYTHON
    - name: pyenv pre-reqs
      tags: python
      apt:
        force: yes
        state: present
        update_cache: yes
        cache_valid_time: 604800
        name:
          - make
          - build-essential
          - libssl-dev
          - zlib1g-dev
          - libbz2-dev
          - libreadline-dev
          - libsqlite3-dev
          - wget
          - curl
          - llvm
          - libncursesw5-dev
          - xz-utils
          - tk-dev
          - libxml2-dev
          - libxmlsec1-dev
          - libffi-dev
          - liblzma-dev

    - name: Download and run pyenv installer
      shell: curl https://pyenv.run | bash
      tags:
        - python

    - name: add user configuration
      blockinfile:
        path: /home/{{ansible_user_id}}/.bashrc
        block: |
          export PYENV_ROOT="$HOME/.pyenv"
          export PATH="$PYENV_ROOT/bin:$PATH"
          eval "$(pyenv init --path)"
          eval "$(pyenv init -)"
        backup: yes

